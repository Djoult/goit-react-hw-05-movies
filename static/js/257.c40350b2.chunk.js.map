{"version":3,"file":"static/js/257.c40350b2.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Layout/Layout.styled.jsx","components/Layout/Layout.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","components/Loader/Loader.jsx","components/Movie/Movie.styled.jsx","components/Movie/Movie.jsx","components/Actor/Actor.styled.jsx","components/Actor/Actor.jsx","components/ReviewItem/ReviewItem.styled.jsx","components/ReviewItem/ReviewItem.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 24px;\n  margin-bottom: 32px;\n`;\n\nexport const NoInfo = styled.p`\n  color: black;\n  font-size: 24px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'services/movieAPI/movieAPI';\nimport { Actor } from 'components';\nimport { NoInfo, List } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    fetchCast(movieId).then(setCast).catch(console.log);\n  }, [movieId]);\n\n  return (\n    <>\n      {cast.length ? (\n        <List>\n          {cast.map(actorInfo => (\n            <Actor key={actorInfo.id} {...actorInfo} />\n          ))}\n        </List>\n      ) : (\n        <NoInfo>There are not information about movie cast </NoInfo>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const Container = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 16px;\n`;\n\nexport const Header = styled.header`\n  position: sticky;\n  top: 0;\n  padding: 10px;\n  z-index: 2;\n  background-color: rgba(32, 6, 98, 0.9);\n`;\n\nexport const Nav = styled.nav`\n  display: flex;\n  align-items: baseline;\n  gap: 30px;\n`;\n\nexport const StyledLink = styled(NavLink)`\n  color: #ffffff;\n  text-decoration: none;\n\n  &.active {\n    color: #9d28b4;\n    font-weight: 500;\n  }\n`;\n","import { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { Container, Header, Nav, StyledLink } from './Layout.styled';\n\nconst Layout = () => {\n  return (\n    <>\n      <Header>\n        <Container>\n          <Nav>\n            <StyledLink to=\"/\">Home</StyledLink>\n            <StyledLink to=\"/movies\">Movies</StyledLink>\n          </Nav>\n        </Container>\n      </Header>\n      <main>\n        <Container padding>\n          <Suspense fallback={<div>Wait</div>}>\n            <Outlet />\n          </Suspense>\n        </Container>\n      </main>\n    </>\n  );\n};\n\nexport default Layout;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  color: #100d0d;\n  display: flex;\n  flex-direction: column;\n  gap: 7px;\n  margin-bottom: 24px;\n`;\n\nexport const NoInfo = styled.p`\n  color: black;\n  font-size: 24px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from 'services/movieAPI/movieAPI';\nimport { ReviewItem } from 'components';\nimport { List, NoInfo } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    fetchReviews(movieId)\n      .then(data => {\n        setReviews(data);\n      })\n      .catch(console.log);\n  }, [movieId]);\n  return (\n    <>\n      {reviews.length ? (\n        <List>\n          {reviews.map(review => (\n            <ReviewItem key={review.id} {...review} />\n          ))}\n        </List>\n      ) : (\n        <NoInfo>There are not any reviews for this movie yet </NoInfo>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import { Dna } from 'react-loader-spinner';\nimport PropTypes from 'prop-types';\n\nconst Loader = ({ visible }) => {\n  return (\n    <Dna\n      height=\"90\"\n      width=\"90\"\n      color=\"#232caa\"\n      ariaLabel=\"tail-spin-loading\"\n      radius=\"1\"\n      visible={visible}\n    />\n  );\n};\n\nLoader.propTypes = {\n  visible: PropTypes.bool.isRequired,\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\n\nexport const OutsideWrap = styled.div`\n  display: flex;\n  gap: 24px;\n  padding: 16px;\n  background-color: #1a217a;\n  border-radius: 16px;\n`;\n\nexport const ImgWrap = styled.div``;\n\nexport const Img = styled.img`\n  width: 350px;\n  height: 400px;\n  /* object-fit: cover; */\n`;\n\nexport const InsideWrap = styled.div`\n  font-size: 16px;\n  color: white;\n`;\n\nexport const MovieTitle = styled.h2`\n  margin-bottom: 4px;\n\n  font-size: 32px;\n  color: white;\n`;\nexport const Year = styled.p`\n  margin-bottom: 8px;\n`;\n\nexport const Span = styled.span`\n  color: #c8c82f;\n  color: ${props => props.rating > 60 && 'green'};\n  color: ${props => Number(props.rating) < 45 && 'red'};\n`;\n\nexport const SubTitle = styled.h3`\n  margin-top: 16px;\n  margin-bottom: 4px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 8px;\n  color: #2bc098;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  Img,\n  ImgWrap,\n  InsideWrap,\n  List,\n  MovieTitle,\n  OutsideWrap,\n  Span,\n  SubTitle,\n  Year,\n} from './Movie.styled';\n\nconst Movie = ({ movieData }) => {\n  return (\n    <>\n      <OutsideWrap>\n        <ImgWrap>\n          <Img src={movieData.src} alt={movieData.title} />\n        </ImgWrap>\n        <InsideWrap>\n          <MovieTitle>{movieData.title}</MovieTitle>\n          <Year>({movieData.release_date})</Year>\n          <div>\n            <p>\n              User score:{' '}\n              <Span rating={movieData.userScore}>{movieData.userScore}%</Span>\n            </p>\n            <SubTitle>Overview</SubTitle>\n            <p>{movieData.overview}</p>\n            <SubTitle>Genres</SubTitle>\n            <List>{movieData.genresList}</List>\n          </div>\n        </InsideWrap>\n      </OutsideWrap>\n    </>\n  );\n};\n\nMovie.propTypes = {\n  movieData: PropTypes.shape({\n    title: PropTypes.string,\n    src: PropTypes.string.isRequired,\n    userScore: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genresList: PropTypes.array.isRequired,\n  }).isRequired,\n};\n\nexport default Movie;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li``;\n\nexport const Img = styled.img`\n  margin-bottom: 4px;\n\n  width: 100px;\n  height: 150px;\n  object-fit: cover;\n  border-radius: 12px;\n`;\n\nexport const Name = styled.h3`\n  margin-bottom: 2px;\n  width: 40px;\n  font-style: italic;\n  font-size: 14px;\n  color: black;\n`;\n\nexport const Role = styled.p`\n  width: 40px;\n  font-weight: 700;\n  font-style: italic;\n  color: #4e2bc0;\n`;\n","import PropTypes from 'prop-types';\nimport { Img, Item, Name, Role } from './Actor.styled';\n\nconst Actor = ({ name, character, src }) => {\n  return (\n    <Item>\n      <Img src={src} alt={name} />\n      <Name>{name}</Name>\n      <Role>{character}</Role>\n    </Item>\n  );\n};\n\nActor.propTypes = {\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n  src: PropTypes.string.isRequired,\n};\n\nexport default Actor;\n","import styled from '@emotion/styled';\nimport { BsPersonFill } from 'react-icons/bs';\n\nexport const Item = styled.li``;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 8px;\n`;\nexport const StyledIcon = styled(BsPersonFill)`\n  color: ${props => props.inputcolor || 'palevioletred'};\n`;\n\nexport const Title = styled.h3`\n  color: #434245;\n`;\n\nexport const Content = styled.p`\n  color: #968787;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Content, Item, StyledIcon, Title, Wrapper } from './ReviewItem.styled';\n\nconst ReviewItem = ({ author, content }) => {\n  return (\n    <Item>\n      <Wrapper>\n        <StyledIcon\n          inputcolor={`#${Math.floor(Math.random() * 16777215).toString(16)}`}\n        />\n        <Title>{author}</Title>\n      </Wrapper>\n      <Content>{content}</Content>\n    </Item>\n  );\n};\n\nReviewItem.propTypes = {\n  author: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n};\n\nexport default ReviewItem;\n","import { Link, NavLink } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nexport const LinkStyled = styled(Link)`\n  display: inline-block;\n  margin-top: 8px;\n  margin-bottom: 16px;\n  padding: 8px;\n\n  background-color: #4e4ebc;\n  color: white;\n\n  border-radius: 6px;\n\n  transition: background-color 0.3s cubic-bezier(0.7, 0.98, 0.86, 0.98),\n    color 0.3s cubic-bezier(0.7, 0.98, 0.86, 0.98);\n\n  :hover,\n  :focus {\n    background-color: #299cb9;\n    color: #0f0707;\n  }\n`;\n\nexport const ExtraInfo = styled.p`\n  margin-top: 24px;\n  margin-bottom: 12px;\n  font-size: 24px;\n  font-weight: 700;\n  color: #0c0606;\n  text-transform: uppercase;\n`;\n\nexport const LinkList = styled.ul`\n  display: flex;\n  align-items: baseline;\n  gap: 16px;\n  margin-bottom: 12px;\n`;\n\nexport const StyledLink = styled(NavLink)`\n  font-size: 24px;\n  color: #4e4ebc;\n\n  transition: transform 0.3s cubic-bezier(0.7, 0.98, 0.86, 0.98);\n\n  :hover,\n  :focus {\n    transform: scale(1.03);\n  }\n\n  &.active {\n    color: #299cb9;\n    font-size: 28px;\n  }\n`;\n","import React, { Suspense, useEffect, useRef, useState } from 'react';\nimport { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { Loader, Movie } from 'components';\nimport { fetchMovie } from 'services/movieAPI/movieAPI';\nimport { GiReturnArrow } from 'react-icons/gi';\nimport {\n  ExtraInfo,\n  LinkList,\n  LinkStyled,\n  StyledLink,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const backUpLinkRef = useRef(location.state?.from ?? '/movies');\n\n  const [movieData, setMovieData] = useState(null);\n  const [showLoader, setShowLoader] = useState(false);\n\n  useEffect(() => {\n    setShowLoader(true);\n    fetchMovie(Number(movieId))\n      .then(setMovieData)\n      .catch(console.log)\n      .finally(() => setShowLoader(false));\n  }, [movieId]);\n\n  return (\n    <section>\n      <LinkStyled to={backUpLinkRef.current}>\n        <GiReturnArrow />\n      </LinkStyled>\n      {showLoader && <Loader visible={showLoader} />}\n      {movieData && <Movie movieData={movieData} />}\n      <ExtraInfo>Additionally</ExtraInfo>\n      <LinkList>\n        <li>\n          <StyledLink to=\"cast\">Cast</StyledLink>\n        </li>\n        <li>\n          <StyledLink to=\"reviews\">Reviews</StyledLink>\n        </li>\n      </LinkList>\n      <Suspense fallback={<div>Wait</div>}>\n        <Outlet />\n      </Suspense>\n    </section>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["List","styled","NoInfo","movieId","useParams","useState","cast","setCast","useEffect","fetchCast","then","catch","console","log","length","map","actorInfo","id","Container","Header","Nav","StyledLink","NavLink","to","padding","Suspense","fallback","reviews","setReviews","fetchReviews","data","review","visible","height","width","color","ariaLabel","radius","OutsideWrap","ImgWrap","Img","InsideWrap","MovieTitle","Year","Span","props","rating","Number","SubTitle","movieData","src","alt","title","release_date","userScore","overview","genresList","Item","Name","Role","name","character","Wrapper","StyledIcon","BsPersonFill","inputcolor","Title","Content","author","content","Math","floor","random","toString","LinkStyled","Link","ExtraInfo","LinkList","location","useLocation","backUpLinkRef","useRef","state","from","setMovieData","showLoader","setShowLoader","fetchMovie","finally","current"],"sourceRoot":""}